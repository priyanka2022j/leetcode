Search in Rotated Sorted Array

int search(int* nums, int numsSize, int target){
    int start = 0, end = numsSize - 1;
    while(start <= end)
    {
        int mid = (start + end)/2;
        if(target == nums[mid])
            return mid;
        else if(nums[start] <= nums[mid])
        {
            if(nums[start] <= target && target <= nums[mid])
                end = mid - 1;
            else
                start = mid + 1;
        }
        else
        {
            if(nums[mid] <= target && target <= nums[end])
                start = mid + 1;
            else
                end = mid - 1;
        }
    }
    return -1;
}
2.maximum subarray
class Solution {
    public int maxSubArray(int[] nums) {
        
        if(nums.length==0)
          return 0;
        int cur = nums[0];
        int max = nums[0];
        for(int i=1;i<nums.length;i++){
            if(cur+nums[i]>nums[i])
              cur+=nums[i];
            else
              cur=nums[i];
            if(cur>max)
              max=cur;
        }
        return max;


        }
        
    }
    3.unique paths
    class Solution {
    public int uniquePaths(int m, int n) {
        int[] result=new int[n+1];
        Arrays.fill(result,1);
        for(int i=2;i<=m;i++){
            for(int j=2;j<=n;j++){
                result[j]=result[j]+result[j-1];
            }
        }
        return result[n];
        
    }
}
3.sort color
class Solution {
    public void sortColors(int[] nums) {
        if (nums.length==1){
            return;
        }
        int j=0,k=nums.length-1;
        for(int i=0;i<nums.length;){
            if(nums[i]==0){
                swap(nums,i,j);
                j++;
                i++;   
             }
             else if(nums[i]==2&&i<k){
                 swap(nums,i,k);
                 k--;
             }
             else{
                 i++;
             }
                
            }
        }
        private void swap(int[] nums,int i,int j){int maxProfit(int* prices, int pricesSize){
    int maxProfit=0;
    int minprice=prices[0];
    for(int i =0;i<pricesSize;i++){
        if(prices[i]<=minprice){
            minprice=prices[i];
        }
        if(prices[i]-minprice>maxProfit){
            maxProfit=prices[i]-minprice;
        }int maxProfit(int* prices, int pricesSize){
    int maxProfit=0;
    int minprice=prices[0];
    for(int i =0;i<pricesSize;i++){
        if(prices[i]<=minprice){
            minprice=prices[i];
        }
        if(prices[i]-minprice>maxProfit){
            maxProfit=prices[i]-minprice;
        }

    }
    return maxProfit;

}

    }
    return maxProfit;

}
5.majority element

            int temp = nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
        }

}
 4.best time to buy stock
 
